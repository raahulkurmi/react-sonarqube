name: SonarQube Analysis (Community Edition, No Raw Metrics Print)

on:
  pull_request:
    branches:
      - main

jobs:
  sonar:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm test -- --coverage
        continue-on-error: true

      - name: Run SonarQube Scanner (no PR params)
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          npx sonar-scanner \
            -Dsonar.projectKey=newtest \
            -Dsonar.sources=. \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

      - name: Wait for SonarQube analysis to complete
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          COMPONENT_KEY="newtest"
          ATTEMPTS=0
          MAX_ATTEMPTS=15
          SLEEP_SECONDS=10

          TASK_ID=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "${{ secrets.SONAR_HOST_URL }}/api/ce/component?component=${COMPONENT_KEY}" | jq -r '.current.id')

          echo "SonarQube task id: $TASK_ID"

          if [ "$TASK_ID" = "null" ]; then
            echo "❌ No current SonarQube task found for component $COMPONENT_KEY"
            exit 1
          fi

          while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
              "${{ secrets.SONAR_HOST_URL }}/api/ce/task?id=${TASK_ID}" | jq -r '.task.status')

            echo "SonarQube task status: $STATUS"

            if [ "$STATUS" = "SUCCESS" ]; then
              echo "✅ SonarQube analysis completed successfully"
              break
            elif [ "$STATUS" = "FAILED" ]; then
              echo "❌ SonarQube analysis failed"
              exit 1
            fi

            sleep $SLEEP_SECONDS
            ATTEMPTS=$((ATTEMPTS+1))
          done

          if [ $ATTEMPTS -eq $MAX_ATTEMPTS ]; then
            echo "❌ Timed out waiting for SonarQube analysis"
            exit 1
          fi

      - name: Fetch SonarQube metrics (no raw print)
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "${{ secrets.SONAR_HOST_URL }}/api/measures/component?component=newtest&metricKeys=bugs,vulnerabilities,code_smells,coverage" \
            -o sonar_metrics.json

      - name: Create comment body
        run: |
          echo "### 📊 SonarQube Quality Report for \`newtest\`" > sonar_comment.md

          if jq -e '.component.measures' sonar_metrics.json > /dev/null; then
            jq -r '.component.measures[] | "- \(.metric | ascii_upcase): \(.value)"' sonar_metrics.json >> sonar_comment.md
          else
            echo "⚠️ Could not retrieve metrics. Check project key/token or SonarQube availability." >> sonar_comment.md
          fi

      - name: Post comment on PR
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GH_PAT }}
          issue-number: ${{ github.event.pull_request.number }}
          body-path: sonar_comment.md
