name: SonarQube Analysis (Community Edition, Debug)

on:
  pull_request:
    branches:
      - main

jobs:
  sonar:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm test -- --coverage
        continue-on-error: true

      - name: Run SonarQube Scanner (verbose)
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          npx sonar-scanner \
            -Dsonar.projectKey=newtest \
            -Dsonar.sources=. \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
            -X

      - name: Sleep 15 seconds to allow SonarQube to register analysis task
        run: sleep 15

      - name: Fetch SonarQube analysis task ID with debug info
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          COMPONENT_KEY="newtest"

          echo "Fetching current task for component $COMPONENT_KEY..."

          curl -s -u "${SONAR_TOKEN}:" \
            "${{ secrets.SONAR_HOST_URL }}/api/ce/component?component=${COMPONENT_KEY}" | tee response.json

          TASK_ID=$(jq -r '.current.id' response.json)
          echo "Task ID from current task API: $TASK_ID"

          if [ "$TASK_ID" = "null" ] || [ -z "$TASK_ID" ]; then
            echo "No current task found, trying recent tasks API..."

            curl -s -u "${SONAR_TOKEN}:" \
              "${{ secrets.SONAR_HOST_URL }}/api/ce/activity?component=${COMPONENT_KEY}&max=5" | tee recent_tasks.json

            TASK_ID=$(jq -r '.tasks[0].id' recent_tasks.json)
            echo "Task ID from recent tasks API: $TASK_ID"

            if [ -z "$TASK_ID" ] || [ "$TASK_ID" = "null" ]; then
              echo "❌ No analysis tasks found for component $COMPONENT_KEY"
              exit 1
            fi
          fi

          # Wait for analysis to complete
          ATTEMPTS=0
          MAX_ATTEMPTS=20
          SLEEP_SECONDS=10

          while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            STATUS=$(curl -s -u "${SONAR_TOKEN}:" \
              "${{ secrets.SONAR_HOST_URL }}/api/ce/task?id=${TASK_ID}" | jq -r '.task.status')

            echo "SonarQube task status: $STATUS"

            if [ "$STATUS" = "SUCCESS" ]; then
              echo "✅ SonarQube analysis completed successfully"
              exit 0
            elif [ "$STATUS" = "FAILED" ]; then
              echo "❌ SonarQube analysis failed"
              exit 1
            fi

            sleep $SLEEP_SECONDS
            ATTEMPTS=$((ATTEMPTS+1))
          done

          echo "❌ Timed out waiting for SonarQube analysis"
          exit 1

      - name: Fetch SonarQube metrics quietly
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          curl -s -u "${SONAR_TOKEN}:" \
            "${{ secrets.SONAR_HOST_URL }}/api/measures/component?component=newtest&metricKeys=bugs,vulnerabilities,code_smells,coverage" \
            -o sonar_metrics.json

      - name: Create PR comment body
        run: |
          echo "### 📊 SonarQube Quality Report for \`newtest\`" > sonar_comment.md

          if jq -e '.component.measures' sonar_metrics.json > /dev/null; then
            jq -r '.component.measures[] | "- \(.metric | ascii_upcase): \(.value)"' sonar_metrics.json >> sonar_comment.md
          else
            echo "⚠️ Could not retrieve metrics. Check project key/token or SonarQube availability." >> sonar_comment.md
          fi

      - name: Post comment on PR
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GH_PAT }}
          issue-number: ${{ github.event.pull_request.number }}
          body-path: sonar_comment.md
